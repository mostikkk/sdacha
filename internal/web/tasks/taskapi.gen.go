// Package tasks provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package tasks

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
)

// CreateTask defines model for CreateTask.
type CreateTask struct {
	IsDone *bool  `json:"is_done,omitempty"`
	Task   string `json:"task"`
	UserId int    `json:"user_id"`
}

// DeleteTask defines model for DeleteTask.
type DeleteTask struct {
	Id     int `json:"id"`
	UserId int `json:"user_id"`
}

// Task defines model for Task.
type Task struct {
	Id     *int    `json:"id,omitempty"`
	IsDone *bool   `json:"is_done,omitempty"`
	Task   *string `json:"task,omitempty"`
	UserId *int    `json:"user_id,omitempty"`
}

// UpdateTask defines model for UpdateTask.
type UpdateTask struct {
	Id     int    `json:"id"`
	IsDone *bool  `json:"is_done,omitempty"`
	Task   string `json:"task"`
	UserId *int   `json:"user_id,omitempty"`
}

// DeleteTasksJSONRequestBody defines body for DeleteTasks for application/json ContentType.
type DeleteTasksJSONRequestBody = DeleteTask

// PatchTasksJSONRequestBody defines body for PatchTasks for application/json ContentType.
type PatchTasksJSONRequestBody = UpdateTask

// PostTasksJSONRequestBody defines body for PostTasks for application/json ContentType.
type PostTasksJSONRequestBody = CreateTask

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a task
	// (DELETE /tasks)
	DeleteTasks(ctx echo.Context) error
	// Update an existing task
	// (PATCH /tasks)
	PatchTasks(ctx echo.Context) error
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx echo.Context) error
	// Get tasks for a specific user
	// (GET /tasks/{user_id})
	GetTasksUserId(ctx echo.Context, userId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteTasks converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTasks(ctx)
	return err
}

// PatchTasks converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTasks(ctx)
	return err
}

// PostTasks converts echo context to params.
func (w *ServerInterfaceWrapper) PostTasks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTasks(ctx)
	return err
}

// GetTasksUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTasksUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "user_id" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "user_id", runtime.ParamLocationPath, ctx.Param("user_id"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTasksUserId(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/tasks", wrapper.DeleteTasks)
	router.PATCH(baseURL+"/tasks", wrapper.PatchTasks)
	router.POST(baseURL+"/tasks", wrapper.PostTasks)
	router.GET(baseURL+"/tasks/:user_id", wrapper.GetTasksUserId)

}

type DeleteTasksRequestObject struct {
	Body *DeleteTasksJSONRequestBody
}

type DeleteTasksResponseObject interface {
	VisitDeleteTasksResponse(w http.ResponseWriter) error
}

type DeleteTasks204Response struct {
}

func (response DeleteTasks204Response) VisitDeleteTasksResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTasks404Response struct {
}

func (response DeleteTasks404Response) VisitDeleteTasksResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchTasksRequestObject struct {
	Body *PatchTasksJSONRequestBody
}

type PatchTasksResponseObject interface {
	VisitPatchTasksResponse(w http.ResponseWriter) error
}

type PatchTasks200JSONResponse Task

func (response PatchTasks200JSONResponse) VisitPatchTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchTasks404Response struct {
}

func (response PatchTasks404Response) VisitPatchTasksResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostTasksRequestObject struct {
	Body *PostTasksJSONRequestBody
}

type PostTasksResponseObject interface {
	VisitPostTasksResponse(w http.ResponseWriter) error
}

type PostTasks201JSONResponse Task

func (response PostTasks201JSONResponse) VisitPostTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetTasksUserIdRequestObject struct {
	UserId int `json:"user_id"`
}

type GetTasksUserIdResponseObject interface {
	VisitGetTasksUserIdResponse(w http.ResponseWriter) error
}

type GetTasksUserId200JSONResponse []Task

func (response GetTasksUserId200JSONResponse) VisitGetTasksUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTasksUserId404Response struct {
}

func (response GetTasksUserId404Response) VisitGetTasksUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Delete a task
	// (DELETE /tasks)
	DeleteTasks(ctx context.Context, request DeleteTasksRequestObject) (DeleteTasksResponseObject, error)
	// Update an existing task
	// (PATCH /tasks)
	PatchTasks(ctx context.Context, request PatchTasksRequestObject) (PatchTasksResponseObject, error)
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx context.Context, request PostTasksRequestObject) (PostTasksResponseObject, error)
	// Get tasks for a specific user
	// (GET /tasks/{user_id})
	GetTasksUserId(ctx context.Context, request GetTasksUserIdRequestObject) (GetTasksUserIdResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// DeleteTasks operation middleware
func (sh *strictHandler) DeleteTasks(ctx echo.Context) error {
	var request DeleteTasksRequestObject

	var body DeleteTasksJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTasks(ctx.Request().Context(), request.(DeleteTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTasksResponseObject); ok {
		return validResponse.VisitDeleteTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchTasks operation middleware
func (sh *strictHandler) PatchTasks(ctx echo.Context) error {
	var request PatchTasksRequestObject

	var body PatchTasksJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTasks(ctx.Request().Context(), request.(PatchTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchTasksResponseObject); ok {
		return validResponse.VisitPatchTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasks operation middleware
func (sh *strictHandler) PostTasks(ctx echo.Context) error {
	var request PostTasksRequestObject

	var body PostTasksJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasks(ctx.Request().Context(), request.(PostTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTasksResponseObject); ok {
		return validResponse.VisitPostTasksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTasksUserId operation middleware
func (sh *strictHandler) GetTasksUserId(ctx echo.Context, userId int) error {
	var request GetTasksUserIdRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTasksUserId(ctx.Request().Context(), request.(GetTasksUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTasksUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTasksUserIdResponseObject); ok {
		return validResponse.VisitGetTasksUserIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}
